// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// RcppEigenProd1
SEXP RcppEigenProd1(const Eigen::Map<Eigen::MatrixXd> Z_alles, const Eigen::Map<Eigen::SparseMatrix<double> > D, const Eigen::Map<Eigen::SparseMatrix<double> > SigmaInv, const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::VectorXd> Mu);
RcppExport SEXP _glmmLasso_RcppEigenProd1(SEXP Z_allesSEXP, SEXP DSEXP, SEXP SigmaInvSEXP, SEXP ySEXP, SEXP MuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Z_alles(Z_allesSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type SigmaInv(SigmaInvSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type Mu(MuSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppEigenProd1(Z_alles, D, SigmaInv, y, Mu));
    return rcpp_result_gen;
END_RCPP
}
// RcppEigenProd2
SEXP RcppEigenProd2(const Eigen::Map<Eigen::SparseMatrix<double> > D, const Eigen::Map<Eigen::SparseMatrix<double> > SigmaInv);
RcppExport SEXP _glmmLasso_RcppEigenProd2(SEXP DSEXP, SEXP SigmaInvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type SigmaInv(SigmaInvSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppEigenProd2(D, SigmaInv));
    return rcpp_result_gen;
END_RCPP
}
// RcppEigenProd3
SEXP RcppEigenProd3(const Eigen::Map<Eigen::SparseMatrix<double> > W_inv_t, const Eigen::Map<Eigen::MatrixXd> Z_aktuell, const Eigen::Map<Eigen::MatrixXd> InvFisher2);
RcppExport SEXP _glmmLasso_RcppEigenProd3(SEXP W_inv_tSEXP, SEXP Z_aktuellSEXP, SEXP InvFisher2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type W_inv_t(W_inv_tSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Z_aktuell(Z_aktuellSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type InvFisher2(InvFisher2SEXP);
    rcpp_result_gen = Rcpp::wrap(RcppEigenProd3(W_inv_t, Z_aktuell, InvFisher2));
    return rcpp_result_gen;
END_RCPP
}
// RcppEigenDiagSp
SEXP RcppEigenDiagSp(const Eigen::Map<Eigen::VectorXd> a);
RcppExport SEXP _glmmLasso_RcppEigenDiagSp(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppEigenDiagSp(a));
    return rcpp_result_gen;
END_RCPP
}
// RcppEigenSpChol
SEXP RcppEigenSpChol(const Eigen::Map<Eigen::SparseMatrix<double> > W_opt);
RcppExport SEXP _glmmLasso_RcppEigenSpChol(SEXP W_optSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double> > >::type W_opt(W_optSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppEigenSpChol(W_opt));
    return rcpp_result_gen;
END_RCPP
}
// RcppEigenSigmaInv
SEXP RcppEigenSigmaInv(const Eigen::Map<Eigen::VectorXd> mu);
RcppExport SEXP _glmmLasso_RcppEigenSigmaInv(SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppEigenSigmaInv(mu));
    return rcpp_result_gen;
END_RCPP
}
// RcppEigenInvMa
SEXP RcppEigenInvMa(const Eigen::Map<Eigen::MatrixXd> Sigma);
RcppExport SEXP _glmmLasso_RcppEigenInvMa(SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppEigenInvMa(Sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glmmLasso_RcppEigenProd1", (DL_FUNC) &_glmmLasso_RcppEigenProd1, 5},
    {"_glmmLasso_RcppEigenProd2", (DL_FUNC) &_glmmLasso_RcppEigenProd2, 2},
    {"_glmmLasso_RcppEigenProd3", (DL_FUNC) &_glmmLasso_RcppEigenProd3, 3},
    {"_glmmLasso_RcppEigenDiagSp", (DL_FUNC) &_glmmLasso_RcppEigenDiagSp, 1},
    {"_glmmLasso_RcppEigenSpChol", (DL_FUNC) &_glmmLasso_RcppEigenSpChol, 1},
    {"_glmmLasso_RcppEigenSigmaInv", (DL_FUNC) &_glmmLasso_RcppEigenSigmaInv, 1},
    {"_glmmLasso_RcppEigenInvMa", (DL_FUNC) &_glmmLasso_RcppEigenInvMa, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_glmmLasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
